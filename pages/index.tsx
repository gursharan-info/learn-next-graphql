import { ApolloClient, InMemoryCache, gql } from '@apollo/client'
import { useState } from 'react';
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { 
  Heading,
  Box,
  Flex,
  Input,
  Stack,
  IconButton,
  useToast,
} from "@chakra-ui/react";   
import { SearchIcon, CloseIcon } from "@chakra-ui/icons";
import Character from '../components/Characters';

const Home: NextPage = (results) => {
  const initialState = results;
  const [characters, setCharacters] = useState(initialState.characters);
  // console.log(initialState.characters);

  const [search, setSearch] = useState("");
  const toast = useToast();

  return (
    < Flex direction="column" justify="center" align="center">
    
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box mb={4} flexDirection="column" align="center" justify="center" py={8}>
        <Heading as="h1" size="2xl" mb={8}>
          Rick and Morty{" "}
        </Heading>
        <form onSubmit={async (event) => {
                event.preventDefault();
                const results = await fetch("/api/SearchCharacters", {
                  method: "post",
                  body: search,
                });
                const { characters, error } = await results.json();
                if (error) {
                  toast({
                    position: "bottom",
                    title: "An error occurred.",
                    description: error,
                    status: "error",
                    duration: 5000,
                    isClosable: true,
                  });
                } else {
                  setCharacters(characters);
                }
              }}
          >
          <Stack maxWidth="350px" width="100%" isInline mb={8}>
            <Input placeholder="Search" value={search} border="none" 
            onChange={(e) => setSearch(e.target.value)}>

            </Input>
            <IconButton colorScheme="blue" 
            aria-label="Search Database" icon={<SearchIcon/>}
            disabled={search === ""} type="submit" />

            <IconButton
              colorScheme="red"
              aria-label="Reset "
              icon={<CloseIcon />}
              disabled={search === ""}
              onClick={async () => {
                setSearch("");
                setCharacters(initialState.characters);
              }}
            />

          </Stack>
        </form>
        <Character characters={characters}/>
      </Box>
    

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </Flex>
  )
}

export default Home

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: "https://rickandmortyapi.com/graphql",
    cache: new InMemoryCache(),
  });  
  const {data} = await client.query({
    query: gql`
      query {
        characters(page: 2) {
          info {
            count
            pages
          } 
          results {
            name
            id
            location {
              id
              name
            }
            origin {
              id
              name
            }
            episode {
              id
              episode
              air_date
            }
            image
          }
        }
      }`
  });
  return {
    props: {
      characters: data.characters.results,
    }
  }
}
